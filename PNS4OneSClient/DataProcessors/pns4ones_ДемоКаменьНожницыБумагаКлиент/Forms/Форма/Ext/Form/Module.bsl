///////////////////////////////////////////////////////////////////////////////////////////////////////
// (с) Tolkachev Pavel, 2021-2022
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

&НаКлиенте
Перем глОписаниеОбработчикаКомандСервера;

&НаКлиенте
Перем глФормаОжидания;

&НаКлиенте
Перем глПодключениеКСерверуВыполнено;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	ИмяИгрока = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователи.ТекущийПользователь(), "Наименование");
	ИдентификаторИгрока = pns4ones_СервисУведомлений.ПолучитьИдентификаторПользователя();
	
	СостояниеИгры = СостояниеИгрыНеопределено();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не глПараметрыСервисаУведомлений.Используется Тогда
		ПоказатьПредупреждение(, НСтр("ru='Сервис уведомлений не используется. Для возможности играть в ""Камень, Ножницы, Бумага"" необходимо настроить подключение к сервису уведомлений PNS4OneS.'"));
		Отказ = Истина;
		Возврат;
	ИначеЕсли Не глПараметрыСервисаУведомлений.ПодключениеУстановлено Тогда
		ПоказатьПредупреждение(, НСтр("ru='Соединение с сервисом уведомлений не установлено. Для возможности играть в ""Камень, Ножницы, Бумага"" необходимо выполнить подключение к сервису уведомлений PNS4OneS.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	глФормаОжидания = Неопределено;
	глОписаниеОбработчикаКомандСервера = Новый ОписаниеОповещения("ОбработчикКомандСервера", ЭтотОбъект);
	pns4ones_СервисУведомленийКлиент.ПодключитьОбработчикУведомлений(глОписаниеОбработчикаКомандСервера);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ВыполненоПодключениеКСерверу() И ЗавершениеРаботы Тогда
		// При завершении работы запрещены серверные вызовы из-за чего нет возможности отправить сообщение об отключении.
		// Поэтому просто выводится соответствующее сообщение.
		Отказ = Истина;
		ТекстПредупреждения = НСтр("ru='Установлено соединение с сервером игры. Рекомендуется перед завершением работы выполнить отключение от сервера иначе другой игрок будет продолжать ждать вашей готовности к игре.'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	pns4ones_СервисУведомленийКлиент.ОтключитьОбработчикУведомлений(глОписаниеОбработчикаКомандСервера);
	
	Если СостояниеИгры = СостояниеИгрыПоискСервера() Тогда
		ЗавершитьПоискСерверов();
	ИначеЕсли СостояниеИгры = СостояниеИгрыПодключение() Тогда
		глПодключениеКСерверуВыполнено = Истина;
		ЗавершитьПодключениеКСерверу();
	КонецЕсли;
	
	Если ВыполненоПодключениеКСерверу() И Не ЗавершениеРаботы Тогда
		ОтключитьсяОтСервера(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "pns4ones_СервисУведомленийОтключен" Тогда
		Оповещение = Новый ОписаниеОповещения("ПредупреждениеСервисУведомленийОтключенЗавершение", ЭтотОбъект);
		ПоказатьПредупреждение(Оповещение, НСтр("ru='Произошло отключение сервиса уведомлений PNS4OneS. Продолжение игры невозможно!'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредупреждениеСервисУведомленийОтключенЗавершение(ДопПараметры) Экспорт
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СписокСерверовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока <> Неопределено Тогда
		ПодключитьсяКСерверу(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоискСерверов(Команда)
	
	Если СостояниеИгры = СостояниеИгрыПоискСервера() Тогда
		ЗавершитьПоискСерверов();
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаСостояниеПоискаСерверов.Видимость = Истина;
	Элементы.СписокСерверовПоискСерверов.Заголовок = НСтр("ru='Прервать поиск'");
	
	СостояниеИгры = СостояниеИгрыПоискСервера();
	
	СписокСерверов.Очистить();
	
	Данные = Новый Структура;
	Данные.Вставить("Действие", "ПоискСервераКаменьНожницыБумага");
	Данные.Вставить("ИдентификаторКлиента", ИдентификаторИгрока);
	
	Сообщение = pns4ones_СервисУведомленийКлиентСервер.ИнициализироватьСообщение();
	Сообщение.Тема = КаналСервера;
	Сообщение.Данные = Данные;
	
	Оповещение = Новый ОписаниеОповещения("ПоискСерверовЗавершение", ЭтотОбъект);
	
	pns4ones_СервисУведомленийКлиент.НачатьОтправкуУведомленияВсемПользователям(Оповещение, Сообщение);
	
	// Ожидание ответа от потенциальных серверов в течении 10 секунд.
	ПодключитьОбработчикОжидания("ЗавершитьПоискСерверов", 10, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьсяКСерверу(Команда)
	
	ТекущиеДанные = Элементы.СписокСерверов.ТекущиеДанные;
	
	Если СписокСерверов.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Серверов для игры не обнаружено. Для обновления списка доступных серверов нажмите кнопку ""Поиск серверов"".'"));
		Возврат;
	ИначеЕсли ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru='Выберите в списке сервер, к которому вы хотите подключиться.'"));
		Возврат;
	ИначеЕсли Не ТекущиеДанные.Доступен Тогда
		ПоказатьПредупреждение(, НСтр("ru='Выбранный сервер уже занят другими игроками.'"));
		Возврат;
	КонецЕсли;
	
	Если СостояниеИгры = СостояниеИгрыПоискСервера() Тогда
		ЗавершитьПоискСерверов();
	КонецЕсли;
	
	СостояниеИгры = СостояниеИгрыПодключение();
	глПодключениеКСерверуВыполнено = Ложь;
	
	ИдентификаторСервера = ТекущиеДанные.ИдентификаторСервера;
	КаналСервера = ТекущиеДанные.КаналСервера;
	
	ОповещениеОЗакрытииФормыДлительнойОперации = Новый ОписаниеОповещения(
		"ПодключениеКСерверуЗакрытиеФормыДлительнойОперации",
		ЭтотОбъект
	);
	ПоказатьФормуДлительнойОперации(НСтр("ru='Подключение к серверу.'"), ОповещениеОЗакрытииФормыДлительнойОперации);
	
	ОповещениеОЗавершенииПодключения = Новый ОписаниеОповещения("ПодключениеКСерверуЗавершение", ЭтотОбъект);
	
	Данные = Новый Структура;
	Данные.Вставить("Действие", "Подключение");
	Данные.Вставить("ИдентификаторКлиента", ИдентификаторИгрока);
	Данные.Вставить("ИмяИгрока", ИмяИгрока);
	
	НачатьОтправкуДанныхНаСервер(ОповещениеОЗавершенииПодключения, Данные);
	
	// Ожидание подтверждения подключения от сервера в течении 10 секунд. Если в отведённое время ответ не получен,
	// то попытка подкючения считается неудачной.
	ПодключитьОбработчикОжидания("ЗавершитьПодключениеКСерверу", 10, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключениеКСерверуЗакрытиеФормыДлительнойОперации(Результат, ДопПараметры) Экспорт
	
	глФормаОжидания = Неопределено;
	
	ОперацияОтменена = (Результат = Неопределено);
	Если ОперацияОтменена Тогда
		СостояниеИгры = СостояниеИгрыНеопределено();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьсяОтСервера(Команда)
	
	Данные = Новый Структура;
	Данные.Вставить("Действие", "ОтключениеИгрока");
	Данные.Вставить("ИдентификаторКлиента", ИдентификаторИгрока);
	
	НачатьОтправкуДанныхНаСервер(Неопределено, Данные);
	
	ОбработатьОтключенияОтСервера();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьГотовность(Команда)
	
	Если ИгрокГотов Тогда
		Возврат;
	КонецЕсли;
	
	ИгрокГотов = Истина;
	Элементы.ПодтвердитьГотовность.Картинка = БиблиотекаКартинок.pns4ones_ДемоЗеленыйШар;
	
	Данные = Новый Структура;
	Данные.Вставить("Действие", "ПодтверждениеГотовности");
	Данные.Вставить("ИдентификаторКлиента", ИдентификаторИгрока);
	
	Оповещение = Новый ОписаниеОповещения("ПодтверждениеГотовностиЗавершение", ЭтотОбъект);
	НачатьОтправкуДанныхНаСервер(Оповещение, Данные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьВыбор(Команда)
	
	Если Не ЗначениеЗаполнено(ВыборИгрока) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Сделайте выбор.'"));
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаВыборИгрока.Доступность = Ложь;
	Элементы.ГруппаОжиданиеВыбораПротивника.Видимость = Истина;
	
	Данные = Новый Структура;
	Данные.Вставить("Действие", "РезультатИгры");
	Данные.Вставить("ИдентификаторКлиента", ИдентификаторИгрока);
	Данные.Вставить("ВыборИгрока", ВыборИгрока);
	
	Оповещение = Новый ОписаниеОповещения("ОбработкаВыбораИгрокаЗавершение", ЭтотОбъект);
	НачатьОтправкуДанныхНаСервер(Оповещение, Данные);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьИгруЗаново(Команда)
	
	ВыборИгрока = "";
	ВыборПротивника = "";
	
	СостояниеИгры = СостояниеИгрыОжиданиеПротивника();
	
	УстановитьСостояниеПротивника();
	
	Элементы.ПодтвердитьГотовность.Картинка = БиблиотекаКартинок.pns4ones_ДемоКрасныйШар;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОжиданиеПротивника;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСерверов.Имя);
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокСерверов.Доступен");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(128, 128, 128));
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОтправкуДанныхНаСервер(ОповещениеОЗавершении, Данные)
	
	Сообщение = pns4ones_СервисУведомленийКлиентСервер.ИнициализироватьСообщение();
	Сообщение.Тема = КаналСервера;
	Сообщение.Данные = Данные;
	
	pns4ones_СервисУведомленийКлиент.НачатьОтправкуУведомленияПользователю(
		ОповещениеОЗавершении,
		ИдентификаторСервера,
		Сообщение
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуДлительнойОперации(ТекстСообщения, ОповещениеОЗакрытии = Неопределено)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекстСообщения", ТекстСообщения);
	
	глФормаОжидания = ОткрытьФорму(
		"ОбщаяФорма.ДлительнаяОперация",
		ПараметрыФормы,
		ЭтаФорма, , , ,
		ОповещениеОЗакрытии
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуОжидания()
	
	Если глФормаОжидания <> Неопределено Тогда
		глФормаОжидания.Закрыть();
		глФормаОжидания = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтключенияОтСервера()
	
	ВыборИгрока = "";
	ВыборПротивника = "";
	ИгрокГотов = Ложь;
	ИдентификаторПротивника = "";
	ИдентификаторСервера = "";
	ИмяПротивника = "";
	КаналСервера = "";
	ПротивникГотов = Ложь;
	СостояниеИгры = СостояниеИгрыНеопределено();
	
	СписокСерверов.Очистить();
	
	Элементы.ПодтвердитьГотовность.Картинка = БиблиотекаКартинок.pns4ones_ДемоКрасныйШар;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПодключениеКСерверу;
	ПоискСерверов(Неопределено);
	
КонецПроцедуры

#Область ПоискСерверов

&НаКлиенте
Процедура ПоискСерверовЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено И Не Результат.Успешно Тогда
		ТекстСообщения = НСтр("ru='Произошла ошибка при поиске серверов'") + ":" + Символы.ПС +
			Результат.ТекстОшибки;
		ПоказатьПредупреждение(, ТекстСообщения);
		ЗавершитьПоискСерверов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПоискСерверов()
	
	ОтключитьОбработчикОжидания("ЗавершитьПоискСерверов");
	
	Элементы.ГруппаСостояниеПоискаСерверов.Видимость = Ложь;
	Элементы.СписокСерверовПоискСерверов.Заголовок = НСтр("ru='Поиск серверов'");
	
	СостояниеИгры = СостояниеИгрыНеопределено();
	
КонецПроцедуры

#КонецОбласти

#Область ПодключениеКСерверу

&НаКлиенте
Процедура ПодключениеКСерверуЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено И Не Результат.Успешно Тогда
		ТекстСообщения = НСтр("ru='Произошла ошибка при подключении к серверу'") + ":" + Символы.ПС +
			Результат.ТекстОшибки;
		ПоказатьПредупреждение(, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПодключениеКСерверу()
	
	ЗакрытьФормуОжидания();
	ОтключитьОбработчикОжидания("ЗавершитьПодключениеКСерверу");
	
	Если Не глПодключениеКСерверуВыполнено Тогда
		СостояниеИгры = СостояниеИгрыНеопределено();
		ПоказатьПредупреждение(, НСтр("ru='Не удалось подключиться к серверу.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВыполненоПодключениеКСерверу()
	
	Возврат СостояниеИгры = СостояниеИгрыОжиданиеПротивника()
		Или СостояниеИгры = СостояниеИгрыИгра()
		Или СостояниеИгры = СостояниеИгрыРезультатИгры();
	
КонецФункции

#КонецОбласти

#Область ОжиданиеНачалаИгры

&НаКлиенте
Процедура УстановитьДанныеПротивника(ДанныеПротивника)
	
	ЕстьПротивник = ДанныеПротивника.Свойство("ИдентификаторПротивника");
	Если ЕстьПротивник Тогда
		ИдентификаторПротивника = ДанныеПротивника.ИдентификаторПротивника;
		ИмяПротивника = ДанныеПротивника.ИмяПротивника;
		ПротивникГотов = НРег(ДанныеПротивника.ГотовностьПротивника) = "true";
	Иначе
		ИдентификаторПротивника = "";
		ИмяПротивника = НСтр("ru='Нет'");
		ПротивникГотов = Ложь;
	КонецЕсли;
	
	УстановитьСостояниеПротивника();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСостояниеПротивника()
	
	ЕстьПротивник = Не ПустаяСтрока(ИдентификаторПротивника);
	Если ЕстьПротивник Тогда
		СостояниеПротивника = ?(ПротивникГотов, НСтр("ru='Готов к игре'"), НСтр("ru='Ожидание готовности'"));
	Иначе
		СостояниеПротивника = НСтр("ru='Ожидание подключения'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеГотовностиЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено И Не Результат.Успешно Тогда
		ТекстСообщения = НСтр("ru='Произошла ошибка при подтверждении готовности'") + ":" + Символы.ПС +
			Результат.ТекстОшибки;
		ПоказатьПредупреждение(, ТекстСообщения);

		ИгрокГотов = Ложь;
		Элементы.ПодтвердитьГотовность.Картинка = БиблиотекаКартинок.pns4ones_ДемоКрасныйШар;
		
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Игра

&НаКлиенте
Процедура НачатьИгру()
	
	ВыборИгрока = "";
	Элементы.ГруппаОжиданиеВыбораПротивника.Видимость = Ложь;
	Элементы.ГруппаВыборИгрока.Доступность = Истина;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаИгра;
	
	СостояниеИгры = СостояниеИгрыИгра();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИгрокаЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено И Не Результат.Успешно Тогда
		ТекстСообщения = НСтр("ru='Произошла ошибка при отправке выбора на сервер'") + ":" + Символы.ПС +
			Результат.ТекстОшибки;
		ПоказатьПредупреждение(, ТекстСообщения);

		Элементы.ГруппаВыборИгрока.Доступность = Истина;
		Элементы.ГруппаОжиданиеВыбораПротивника.Видимость = Ложь;
		
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВзаимодействиеССервером

&НаКлиенте
Процедура ОбработчикКомандСервера(Сообщение, ДопПараметры) Экспорт
	
	Если ТипЗнч(Сообщение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Сообщение.СтандартнаяОбработка = Ложь;
	
	Действие = ВРег(Сообщение.Данные.Действие);
	Если Действие <> ВРег("ДанныеСервераКаменьНожницыБумага")
			И Сообщение.Тема <> КаналСервера
	Тогда
		Возврат;
	КонецЕсли;
	
	Если Действие = ВРег("ДанныеСервераКаменьНожницыБумага") Тогда
		ОбработкаКомандыПоискСервера(Сообщение.Данные);
	ИначеЕсли Действие = ВРег("ПодключениеВыполнено") Тогда
		ОбработкаКомандыПодключениеКСерверу(Сообщение.Данные);
	ИначеЕсли Действие = ВРег("ДанныеПротивника") Тогда
		ОбработкаКомандыДанныеПротивника(Сообщение.Данные);
	ИначеЕсли Действие = ВРег("ПротивникГотов") Тогда
		ОбработкаКомандыПротивникГотов();
	ИначеЕсли Действие = ВРег("НачалоИгры") Тогда
		ОбработкаКомандыНачалоИгры();
	ИначеЕсли Действие = ВРег("ЗавершениеИгры") Тогда
		Победитель = Неопределено;
		Сообщение.Данные.Свойство("Победитель", Победитель); // Если победителя нет - ничья.
		ОбработкаКомандыРезультатИгры(Победитель);
	ИначеЕсли Действие = ВРег("ОтключениеПротивника") Тогда
		ОбработкаКомандыОтключениеПротивника();
	ИначеЕсли Действие = ВРег("ОстановкаСервера") Тогда
		ОбработкаКомандыОстановкаСервера();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКомандыПоискСервера(ДанныеСервера)
	
	НоваяСтрока = СписокСерверов.Добавить();
	НоваяСтрока.ИдентификаторСервера = ДанныеСервера.ИдентификаторСервера;
	НоваяСтрока.ИмяСервера = ДанныеСервера.ИмяСервера;
	НоваяСтрока.КаналСервера = ДанныеСервера.КаналСервера;
	
	КоличествоИгроков = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ДанныеСервера.КоличествоИгроков);
	Если КоличествоИгроков = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если КоличествоИгроков < 2 Тогда
		НоваяСтрока.СостояниеСервера = СтрШаблон(НСтр("ru='Ожидает игроков (%1/2)'"), КоличествоИгроков);
		НоваяСтрока.Доступен = Истина;
	Иначе
		НоваяСтрока.СостояниеСервера = НСтр("ru='Занят игроками (2/2)'");
		НоваяСтрока.Доступен = Ложь;
	КонецЕсли;
	
	СписокСерверов.Сортировать("ИмяСервера, Доступен Убыв");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКомандыПодключениеКСерверу(ДанныеПодключения)
	
	// Проверку необходимо выполнить до вызова процедуры ЗавершитьПодключениеКСерверу,
	// т.к. при вызове состояние игры изменится.
	ПодключениеОтменено = (СостояниеИгры <> СостояниеИгрыПодключение());
	
	глПодключениеКСерверуВыполнено = Истина;
	ЗавершитьПодключениеКСерверу();
	
	Если ПодключениеОтменено Тогда
		Возврат;
	КонецЕсли;
	
	Успешно = НРег(ДанныеПодключения.Успешно) = "true";
	Если Не Успешно Тогда
		ТекстСообщения = НСтр("ru='Не удалось подключиться к серверу'") + ":" + Символы.ПС +
			ДанныеПодключения.ТекстСообщения;
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	УстановитьДанныеПротивника(ДанныеПодключения);
	
	СостояниеИгры = СостояниеИгрыОжиданиеПротивника();
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОжиданиеПротивника; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКомандыДанныеПротивника(ДанныеПротивника)
	
	УстановитьДанныеПротивника(ДанныеПротивника);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКомандыПротивникГотов()
	
	ПротивникГотов = Истина;
	УстановитьСостояниеПротивника();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКомандыНачалоИгры()
	
	НачатьИгру();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКомандыРезультатИгры(Победитель)
	
	Если ЗначениеЗаполнено(Победитель) Тогда
		РезультатИгры = ?(Победитель = ИдентификаторИгрока, "ПобедилИгрок", "ПобедилПротивник");
	Иначе
		РезультатИгры = "Ничья";
	КонецЕсли;
	
	Если РезультатИгры = "ПобедилИгрок" Тогда
		
		Если ВыборИгрока = "Камень" Тогда
			ВыборПротивника = "Ножницы";
		ИначеЕсли ВыборИгрока = "Ножницы" Тогда
			ВыборПротивника = "Бумага";
		ИначеЕсли ВыборИгрока = "Бумага" Тогда
			ВыборПротивника = "Камень";
		КонецЕсли;
		
		Элементы.НадписьИгрокПобедил.Видимость = Истина;
		Элементы.НадписьНичья.Видимость = Ложь;
		Элементы.НадписьПротивникПобедил.Видимость = Ложь;
		
	ИначеЕсли РезультатИгры = "ПобедилПротивник" Тогда
		
		Если ВыборИгрока = "Камень" Тогда
			ВыборПротивника = "Бумага";
		ИначеЕсли ВыборИгрока = "Ножницы" Тогда
			ВыборПротивника = "Камень";
		ИначеЕсли ВыборИгрока = "Бумага" Тогда
			ВыборПротивника = "Ножницы";
		КонецЕсли;
		
		Элементы.НадписьИгрокПобедил.Видимость = Ложь;
		Элементы.НадписьНичья.Видимость = Ложь;
		Элементы.НадписьПротивникПобедил.Видимость = Истина;
		
	ИначеЕсли РезультатИгры = "Ничья" Тогда
		
		ВыборПротивника = ВыборИгрока;
		
		Элементы.НадписьИгрокПобедил.Видимость = Ложь;
		Элементы.НадписьНичья.Видимость = Истина;
		Элементы.НадписьПротивникПобедил.Видимость = Ложь;
		
	КонецЕсли;
	
	ИгрокГотов = Ложь;
	ПротивникГотов = Ложь;
	
	СостояниеИгры = СостояниеИгрыРезультатИгры();
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРезультатИгры;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКомандыОтключениеПротивника()
	
	ИгрокГотов = Ложь;
	ИдентификаторПротивника = "";
	ИмяПротивника = НСтр("ru='Нет'");
	ПротивникГотов = Ложь;
	СостояниеИгры = СостояниеИгрыОжиданиеПротивника();
	
	УстановитьСостояниеПротивника();
	
	Если СостояниеИгры = СостояниеИгрыИгра() Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОжиданиеПротивника;
		ПоказатьПредупреждение(, НСтр("ru='Противник покинул игру.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКомандыОстановкаСервера()
	
	ОбработатьОтключенияОтСервера();
	
	ПоказатьПредупреждение(, НСтр("ru='Сервер завершил работу.'"));
	
КонецПроцедуры

#КонецОбласти

#Область ПредопределенныеЗначения

&НаКлиентеНаСервереБезКонтекста
Функция СостояниеИгрыНеопределено()
	Возврат "";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СостояниеИгрыПоискСервера()
	Возврат "ПоискСервера";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СостояниеИгрыПодключение()
	Возврат "Подключение";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СостояниеИгрыОжиданиеПротивника()
	Возврат "ОжиданиеПротивника";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СостояниеИгрыИгра()
	Возврат "Игра";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СостояниеИгрыРезультатИгры()
	Возврат "РезультатИгры";
КонецФункции

#КонецОбласти

#КонецОбласти