///////////////////////////////////////////////////////////////////////////////////////////////////////
// (с) Tolkachev Pavel, 2021-2022
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

&НаКлиенте
Перем глОписаниеОбработчикаКлиентов;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	КаналСервера = Строка(Новый УникальныйИдентификатор);
	УстановитьСостояниеКнопкиУправленияСервером(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	глОписаниеОбработчикаКлиентов = Новый ОписаниеОповещения("ОбработчикКлиентов", ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если СерверЗапущен И Игроки.Количество() > 0 И ЗавершениеРаботы Тогда
		// При завершении работы запрещены серверные вызовы из-за чего нет возможности отправить сообщение об отключении.
		// Поэтому просто выводится соответствующее сообщение.
		Отказ = Истина;
		ТекстПредупреждения = НСтр("ru='Перед завершение работы рекомендуется остановить работу сервера иначе подключенные игроки продолжать ожидать начала игры.'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если СерверЗапущен И Не ЗавершениеРаботы Тогда
		ОстановитьСервер();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗапуститьОстановитьСервер(Команда)
	
	Если Не СерверЗапущен Тогда
		ЗапуститьСервер();
	Иначе
		ОстановитьСервер();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗапуститьСервер()
	
	Игроки.Очистить();
	СостояниеИгры = СостояниеИгрыОжиданиеИгроков();
	
	pns4ones_СервисУведомленийКлиент.ПодключитьОбработчикУведомлений(глОписаниеОбработчикаКлиентов);
	СерверЗапущен = Истина;
	СтатусСервера = "Работает";
	
	УстановитьСостояниеКнопкиУправленияСервером(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОстановитьСервер()
	
	pns4ones_СервисУведомленийКлиент.ОтключитьОбработчикУведомлений(глОписаниеОбработчикаКлиентов);
	СерверЗапущен = Ложь;
	СтатусСервера = "Остановлен";
	
	УстановитьСостояниеКнопкиУправленияСервером(ЭтаФорма);
	
	Данные = Новый Структура("Действие", "ОстановкаСервера");
	Для каждого Игрок Из Игроки Цикл
		ОтправитьДанныеКлиенту(КаналСервера, Игрок.Идентификатор, Данные);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСостояниеКнопкиУправленияСервером(Форма)
	
	Форма.Элементы.ЗапуститьОстановитьСервер.Заголовок = ?(Форма.СерверЗапущен,
		НСтр("ru='Остановить сервер'"),
		НСтр("ru='Запустить сервер'")
	);
	
КонецПроцедуры

#Область ВзаимодействиеСКлиентами

&НаКлиенте
Процедура ОбработчикКлиентов(Сообщение, ДопПараметры) Экспорт
	
	Если ТипЗнч(Сообщение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Сообщение.СтандартнаяОбработка = Ложь;
	
	Действие = ВРег(Сообщение.Данные.Действие);
	Если Действие <> ВРег("ПоискСервераКаменьНожницыБумага")
			И Сообщение.Тема <> КаналСервера
	Тогда
		Возврат;
	КонецЕсли;
	
	Если Действие = ВРег("ПоискСервераКаменьНожницыБумага") Тогда
		ОбработатьДействиеПоискСервера(Сообщение.Данные.ИдентификаторКлиента);
	ИначеЕсли Действие = ВРег("Подключение") Тогда
		ОбработатьДействиеПодключениеИгрока(
			Сообщение.Данные.ИдентификаторКлиента,
			Сообщение.Данные.ИмяИгрока
		);
	ИначеЕсли Действие = ВРег("ПодтверждениеГотовности") Тогда
		ОбработатьДействиеПодтверждениеГотовностиИгрока(Сообщение.Данные.ИдентификаторКлиента);
	ИначеЕсли Действие = ВРег("РезультатИгры") Тогда
		ОбработатьДействиеРезультатИгрока(
			Сообщение.Данные.ИдентификаторКлиента,
			Сообщение.Данные.ВыборИгрока
		);
	ИначеЕсли Действие = ВРег("ОтключениеИгрока") Тогда
		ОбработатьДействиеОтключениеИгрока(Сообщение.Данные.ИдентификаторКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтправитьДанныеКлиенту(КаналСервера, Клиент, Данные)
	
	Сообщение = pns4ones_СервисУведомленийКлиентСервер.ИнициализироватьСообщение();
	Сообщение.Тема = КаналСервера;
	Сообщение.Данные = Данные;
	
	Получатель = pns4ones_СервисУведомленийКлиентСервер.ПолучательПользователь(Клиент);
	Результат = pns4ones_СервисУведомлений.ОтправитьУведомление(Получатель, Сообщение);
	
	Возврат Результат;
	
КонецФункции

#Область ОбработкаДействийКлиентов

&НаКлиенте
Процедура ОбработатьДействиеПоискСервера(ИдентификаторКлиента)
	
	ДанныеДляПодключения = pns4ones_СервисУведомленийВызовСервера.ДанныеПользователяДляПодключенияКСервису();
	
	Данные = Новый Структура;
	Данные.Вставить("Действие", "ДанныеСервераКаменьНожницыБумага");
	Данные.Вставить("ИдентификаторСервера", ДанныеДляПодключения.ИдентификаторПользователя);
	Данные.Вставить("КаналСервера", КаналСервера);
	Данные.Вставить("ИмяСервера", ПолучитьИмяСервераПоИмениПользователя());
	Данные.Вставить("КоличествоИгроков", Строка(Игроки.Количество()));
	
	Результат = ОтправитьДанныеКлиенту(Неопределено, ИдентификаторКлиента, Данные);
	
	Если Не Результат.Успешно Тогда
		ТекстСообщения = "[ОШИБКА] Поиск сервера: " + Результат.ТекстОшибки;
		ВывестиСообщениеВЛог(Лог, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ВывестиСообщениеВЛог(Лог, НСтр("ru='Выполнен ответ на поиск сервера'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДействиеПодключениеИгрока(ИдентификаторКлиента, ИмяИгрока)
	
	Данные = Новый Структура;
	Данные.Вставить("Действие", "ПодключениеВыполнено");
	
	Если СостояниеИгры <> СостояниеИгрыОжиданиеИгроков() Тогда
		
		Данные.Вставить("Успешно", "false");
		Данные.Вставить("ТекстСообщения", НСтр("ru='Сервер находится в игровом состоянии'"));
		
	ИначеЕсли Игроки.Количество() = 2 Тогда
		
		Данные.Вставить("Успешно", "false");
		Данные.Вставить("ТекстСообщения", НСтр("ru='Сервер занят другими игроками'"));
		
	Иначе
		
		Данные.Вставить("Успешно", "true");
		
		Если Игроки.Количество() = 1 Тогда
			Данные.Вставить("ИдентификаторПротивника", Игроки[0].Идентификатор);
			Данные.Вставить("ИмяПротивника", Игроки[0].Имя);
			Данные.Вставить("ГотовностьПротивника", Формат(Игроки[0].Готов, "БЛ=false; БИ=true"));
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = ОтправитьДанныеКлиенту(КаналСервера, ИдентификаторКлиента, Данные);
	
	Если Не Результат.Успешно Тогда
		ТекстСообщения = "[ОШИБКА] Регистрация клиента: " + Результат.ТекстОшибки;
		ВывестиСообщениеВЛог(Лог, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ДанныеИгрока = Игроки.Добавить();
	ДанныеИгрока.Идентификатор = ИдентификаторКлиента;
	ДанныеИгрока.Имя = ИмяИгрока;
	ДанныеИгрока.Готов = Ложь;
	ДанныеИгрока.ВыборИгрока = "";
	
	ВывестиСообщениеВЛог(Лог, СтрШаблон(НСтр("ru='Подключен игрок %1'"), ИмяИгрока));
	
	Если Игроки.Количество() = 2 Тогда
		
		Данные = Новый Структура;
		Данные.Вставить("Действие", "ДанныеПротивника");
		Данные.Вставить("ИдентификаторПротивника", Игроки[1].Идентификатор);
		Данные.Вставить("ИмяПротивника", Игроки[1].Имя);
		Данные.Вставить("ГотовностьПротивника", Формат(Игроки[1].Готов, "БЛ=false; БИ=true"));
		
		Результат = ОтправитьДанныеКлиенту(КаналСервера, Игроки[0].Идентификатор, Данные);
		
		Если Не Результат.Успешно Тогда
			ТекстСообщения = "[ОШИБКА] Регистрация клиента. Отправка данных о противнике: " + Результат.ТекстОшибки;
			ВывестиСообщениеВЛог(Лог, ТекстСообщения);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДействиеПодтверждениеГотовностиИгрока(ИдентификаторКлиента)
	
	СтруктураПоиска = Новый Структура("Идентификатор", ИдентификаторКлиента);
	НайденныеСтроки = Игроки.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru='[ОШИБКА] Подтверждение готовности: неверный идентификатор игрока %1'"),
			ИдентификаторКлиента
		);
		ВывестиСообщениеВЛог(Лог, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки[0].Готов = Истина;
	
	ТекстСообщения = СтрШаблон(НСтр("ru='Игрок %1 готов к игре'"), ИдентификаторКлиента);
	ВывестиСообщениеВЛог(Лог, ТекстСообщения);
	
	ВсеИгрокиГотовы = (Игроки.Количество() = 2
		И Игроки[0].Готов
		И Игроки[1].Готов
	);
	ОповеститьОГотовностиПротивника = (Игроки.Количество() = 2 И Не ВсеИгрокиГотовы);
	
	Если ВсеИгрокиГотовы Тогда
		НачатьИгру();
	ИначеЕсли ОповеститьОГотовностиПротивника Тогда
		ИдентификаторИгрока = ?(Игроки[0].Идентификатор = ИдентификаторКлиента,
			Игроки[1].Идентификатор,
			Игроки[0].Идентификатор
		);
		ОповеститьИгрокаОГотовностиПротивника(ИдентификаторИгрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДействиеРезультатИгрока(ИдентификаторКлиента, ВыборИгрока)
	
	СтруктураПоиска = Новый Структура("Идентификатор", ИдентификаторКлиента);
	НайденныеСтроки = Игроки.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru='[ОШИБКА] Обработка результата: неверный идентификатор игрока %1'"),
			ИдентификаторКлиента
		);
		ВывестиСообщениеВЛог(Лог, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки[0].ВыборИгрока = ВыборИгрока;
	
	ТекстСообщения = СтрШаблон(НСтр("ru='Игрок %1 выбрал %2'"), ИдентификаторКлиента, ВыборИгрока);
	ВывестиСообщениеВЛог(Лог, ТекстСообщения);
	
	ВсеИгрокиСделалиВыбор = (Игроки.Количество() = 2
		И Не ПустаяСтрока(Игроки[0].ВыборИгрока)
		И Не ПустаяСтрока(Игроки[1].ВыборИгрока)
	);
	
	Если ВсеИгрокиСделалиВыбор Тогда
		ЗавершитьИгру();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДействиеОтключениеИгрока(ИдентификаторКлиента)
	Перем УдаляемыйИгрок;
	
	Для каждого Игрок Из Игроки Цикл
		
		Если Игрок.Идентификатор = ИдентификаторКлиента Тогда
			УдаляемыйИгрок = Игрок;
			Продолжить;
		КонецЕсли;
		
		Данные = Новый Структура("Действие", "ОтключениеПротивника");
		Результат = ОтправитьДанныеКлиенту(КаналСервера, Игрок.Идентификатор, Данные);
		
		Если Не Результат.Успешно Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru='[ОШИБКА] Оповещение об отключении игрока клиенту %1: %2.'"),
				ИдентификаторКлиента,
				Результат.ТекстОшибки
			);
			ВывестиСообщениеВЛог(Лог, ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла;
	
	Если УдаляемыйИгрок <> Неопределено Тогда
		Игроки.Удалить(УдаляемыйИгрок);
	КонецЕсли;
	
	СостояниеИгры = СостояниеИгрыОжиданиеИгроков();
	
	ВывестиСообщениеВЛог(Лог, СтрШаблон(НСтр("ru='Игрок %1 покинул сервер'"), ИдентификаторКлиента));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ИгровойПроцесс

&НаКлиенте
Процедура НачатьИгру()
	
	Данные = Новый Структура("Действие", "НачалоИгры");
	
	Для каждого ДанныеИгрока Из Игроки Цикл
		
		Результат = ОтправитьДанныеКлиенту(КаналСервера, ДанныеИгрока.Идентификатор, Данные);
		Если Не Результат.Успешно Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru='[ОШИБКА] Начало игры. Ошибка отправки данных клиенту %1: %2.'"),
				ДанныеИгрока.Идентификатор,
				Результат.ТекстОшибки
			);
			ВывестиСообщениеВЛог(Лог, ТекстСообщения);
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	СостояниеИгры = СостояниеИгрыИгра();
	ВывестиСообщениеВЛог(Лог, НСтр("ru='Начата новая игра'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьИгру()

	ВыборИгрока1 = Игроки[0].ВыборИгрока;
	ВыборИгрока2 = Игроки[1].ВыборИгрока;
	
	Если ВыборИгрока1 <> ВыборИгрока2 Тогда
	
		// Для упрощения определение победителя выполняется "в лоб" без "хитрых" алгоритмов.
		Игрок1Выиграл = (ВыборИгрока1 = "Камень" И ВыборИгрока2 = "Ножницы")
			Или (ВыборИгрока1 = "Ножницы" И ВыборИгрока2 = "Бумага")
			Или (ВыборИгрока1 = "Бумага" И ВыборИгрока2 = "Камень");
			
		Победитель = ?(Игрок1Выиграл,
			Игроки[0].Идентификатор,
			Игроки[1].Идентификатор
		);
		
	Иначе
		
		Победитель = ""; // Пустая строка - ничья.
		
	КонецЕсли;
	
	Данные = Новый Структура;
	Данные.Вставить("Действие", "ЗавершениеИгры");
	Данные.Вставить("Победитель", Победитель);
	
	Для каждого ДанныеИгрока Из Игроки Цикл
		
		ДанныеИгрока.Готов = Ложь;
		ДанныеИгрока.ВыборИгрока = "";
		
		Результат = ОтправитьДанныеКлиенту(КаналСервера, ДанныеИгрока.Идентификатор, Данные);
		Если Не Результат.Успешно Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru='[ОШИБКА] Отправка результатов игроку %1: %2.'"),
				ДанныеИгрока.Идентификатор,
				Результат.ТекстОшибки
			);
			ВывестиСообщениеВЛог(Лог, ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла;
	
	СостояниеИгры = СостояниеИгрыОжиданиеИгроков();
	
	ВывестиСообщениеВЛог(Лог, НСтр("ru='Завершение игры'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьИгрокаОГотовностиПротивника(ИдентификаторИгрока)
	
	Данные = Новый Структура("Действие", "ПротивникГотов");
	Результат = ОтправитьДанныеКлиенту(КаналСервера, ИдентификаторИгрока, Данные);
	
	Если Не Результат.Успешно Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru='[ОШИБКА] Оповещение о готовности противника игрока %1: %2.'"),
			ИдентификаторИгрока,
			Результат.ТекстОшибки
		);
		ВывестиСообщениеВЛог(Лог, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиСообщениеВЛог(Лог, Знач Сообщение)
	
	Если Не ПустаяСтрока(Лог) Тогда
		Лог = Лог + Символы.ПС;
	КонецЕсли;
	
	Лог = Лог + Строка(ТекущаяДата()) + ": " + Сообщение;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяСервераПоИмениПользователя()
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "Наименование");
	
КонецФункции

#КонецОбласти

#Область ПредопределенныеЗначения

&НаКлиентеНаСервереБезКонтекста
Функция СостояниеИгрыОжиданиеИгроков()
	Возврат "ОжиданиеИгроков";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СостояниеИгрыИгра()
	Возврат "Игра";
КонецФункции

#КонецОбласти

#КонецОбласти