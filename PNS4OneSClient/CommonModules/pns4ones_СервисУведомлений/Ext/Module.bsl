///////////////////////////////////////////////////////////////////////////////////////////////////////
// (с) Tolkachev Pavel, 2021-2022
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает группу пользователя ИБ.
//
// Параметры:
//  ПользовательИБ - ПользовательИнформационнойБазы, Строка, УникальныйИдентификатор - Пользователь ИБ, его имя или
//                   идентификатор. Если не указан, то будет возвращена группа текущего пользователя.
// 
// Возвращаемое значение:
//  Строка - группа пользователя ИБ.
//
Функция ГруппаПользователяИБ(Знач ПользовательИБ = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПользовательИБ = Неопределено Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	ИначеЕсли ТипЗнч(ПользовательИБ) = Тип("Строка") Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ПользовательИБ);
	ИначеЕсли ТипЗнч(ПользовательИБ) = Тип("УникальныйИдентификатор") Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ПользовательИБ);
	ИначеЕсли ТипЗнч(ПользовательИБ) = Тип("ПользовательИнформационнойБазы") Тогда
		// Параметр уже содержит нужное значение.
	Иначе
		ВызватьИсключение НСтр("ru='Неверный тип параметра ""ПользовательИБ""'");
	КонецЕсли;
	
	Возврат pns4ones_СервисУведомленийПереопределяемый.ГруппаПользователяИБ(ПользовательИБ);
	
КонецФункции

// Возвращает данные текущего пользователя, используемые для подключения к сервису уведомлений.
// 
// Возвращаемое значение:
//  Структура - данные пользователя, используемые для подключения к сервису уведомлений:
//   * ИдентификаторИБ - Строка - идентификатор текущей информационной базы;
//   * ИдентификаторПользователя - Строка - идентификатор текущего пользователя;
//   * ГруппаПользователя - Строка - группа, в которую входит пользователь для получения групповых уведомлений.
//
Функция ДанныеПользователяДляПодключенияКСервису() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	ДанныеПользователя = Новый Структура;
	ДанныеПользователя.Вставить("ИдентификаторИБ", pns4ones_СервисУведомленийПереопределяемый.ИдентификаторИнформационнойБазы());
	ДанныеПользователя.Вставить("ИдентификаторПользователя", Строка(ПользовательИБ.УникальныйИдентификатор));
	ДанныеПользователя.Вставить("ГруппаПользователя", ГруппаПользователяИБ(ПользовательИБ));
	
	Возврат ДанныеПользователя;
	
КонецФункции

// Выполняет отправку уведомления в сервис уведомлений.
//
// Параметры:
//  Получатель - Структура - структура, описывающая получателя уведомления. В качестве получателя могут выступать:
//                           отдельный пользователь информационной базы, группа пользователей или все пользователи
//                           информационной базы. Подробнее см. функции ПолучательПользователь,
//                           ПолучательГруппаПользователей и ПолучательВсеПользователи.
//  Сообщение - Структура - структура, описывающая отправляемой сообщение Подробнее см. описание функции
//                          ИнициализироватьСообщение.
// 
// Возвращаемое значение:
//  Структура - результат отправки уведомления:
//   * Успешно - Булево - Истина, если уведомление было успешно отправлено. Если при отправке уведомления произошла
//                        ошибка, то содержит значение Ложь.
//   * ТекстОшибки - Строка - в случае возникновения ошибки при отправке уведомления содержит текст, описывающий
//                            возникшую ошибку. В случае успешной отправки уведомления данное свойство отсутствует.
//
Функция ОтправитьУведомление(Получатель, Сообщение) Экспорт
	
	НастройкиСервера = НастройкиСервераОтправкиУведомлений();
	
	Попытка
		СоединениеССервером = СоздатьСоединениеССерверомОтправленияУведомлений(НастройкиСервера);
	Исключение
		Возврат РезультатОтправкиУведомленияОшибка(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеКлючаДоступа = ПрочитатьКлючДоступаКСерверуОтправленияУведомлений();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ПроверитьКлючДоступаКСерверуОтправленияУведомлений(ДанныеКлючаДоступа) Тогда
		
		Попытка
			ДанныеКлючаДоступа = ОбновитьКлючДоступаКСерверуОтправленияУведомлений(СоединениеССервером);
		Исключение
			Возврат РезультатОтправкиУведомленияОшибка(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЕсли;
	
	Попытка
		
		Запрос = Новый HTTPЗапрос("sendmessage");
		Запрос.Заголовки.Вставить("Authorization", "Bearer " + ДанныеКлючаДоступа.КлючДоступа);
		Запрос.Заголовки.Вставить("Content-Type", "application/json");
		Запрос.УстановитьТелоИзСтроки(СообщениеВJSON(Получатель, Сообщение));
		
		Ответ = СоединениеССервером.ОтправитьДляОбработки(Запрос);
		
		Успешно = (Ответ.КодСостояния >= 200 И Ответ.КодСостояния < 400);
		Если Не Успешно Тогда
			
			Если Ответ.КодСостояния = 401 Тогда
				ТекстОшибки = НСтр("ru='Указан неверный ключ доступа (access token) к сервису отправки уведомлений.'");
			ИначеЕсли Ответ.КодСостояния = 403 Тогда
				ТекстОшибки = НСтр("ru='Срок действия ключа доступа (access token) к сервису отправки уведомлений истёк. Необходимо получить новый ключ доступа.'");
			Иначе
				ТекстОшибки = СтрШаблон(НСтр("ru='Код состояния %1'"), Ответ.КодСостояния);
				
				ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
				Если ЗначениеЗаполнено(ТелоОтвета) Тогда
					ТекстОшибки = ":"  + Символы.ПС + ТелоОтвета;
				КонецЕсли;
			КонецЕсли;
			
			Возврат РезультатОтправкиУведомленияОшибка(ТекстОшибки);
			
		КонецЕсли;
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат РезультатОтправкиУведомленияОшибка(ТекстОшибки);
		
	КонецПопытки;
	
	Возврат РезультатОтправкиУведомленияУспешно();
	
КонецФункции

// Выполняет отправку уведомления отдельному пользователю информационной базы.
//
// Параметры:
//  ИдентификаторПользователя - Строка - идентификатор пользователя информационной базы, которому необходимо отправить
//                                       уведомление.
//  Сообщение - Структура - отправляемое сообщение, подробнее см. описание функции ИнициализироватьСообщение.
// 
// Возвращаемое значение:
//  Структура - структура, описывающая результат отправки уведомления.
//              Подробнее см. описание функции ОтправитьУведомление.
//
Функция ОтправитьУведомлениеПользователю(ИдентификаторПользователя, Сообщение) Экспорт
	
	Получатель = pns4ones_СервисУведомленийКлиентСервер.ПолучательПользователь(ИдентификаторПользователя);
	Возврат ОтправитьУведомление(Получатель, Сообщение);
	
КонецФункции

// Выполняет отправку уведомления группе пользователей информационной базы.
//
// Параметры:
//  ГруппаПользователей - Строка - группа пользователей, которым необходимо отправить уведомление.
//  Сообщение - Структура - отправляемое сообщение, подробнее см. описание функции ИнициализироватьСообщение.
// 
// Возвращаемое значение:
//  Структура - структура, описывающая результат отправки уведомления.
//              Подробнее см. описание функции ОтправитьУведомление.
//
Функция ОтправитьУведомлениеГруппеПользователей(ГруппаПользователей, Сообщение) Экспорт
	
	Получатель = pns4ones_СервисУведомленийКлиентСервер.ПолучательГруппаПользователей(ГруппаПользователей);
	Возврат ОтправитьУведомление(Получатель, Сообщение);
	
КонецФункции

// Выполняет отправку уведомления всем пользователям информационной базы.
//
//  ГруппаПользователей - Строка - группа пользователей, которым необходимо отправить уведомление.
//  Сообщение - Структура - отправляемое сообщение, подробнее см. описание функции ИнициализироватьСообщение.
// 
// Возвращаемое значение:
//  Структура - структура, описывающая результат отправки уведомления.
//              Подробнее см. описание функции ОтправитьУведомление.
//
Функция ОтправитьУведомлениеВсемПользователям(Сообщение) Экспорт
	
	Получатель = pns4ones_СервисУведомленийКлиентСервер.ПолучательВсеПользователи();
	Возврат ОтправитьУведомление(Получатель, Сообщение);
	
КонецФункции

// Выполняет отправку уведомления нескольким пользователям информационной базы.
//
// Параметры:
//  ИдентификаторыПолучателей - Массив - массив идентификаторов пользователей, которым необходимо отправить уведомление.
//  Сообщение - Структура - отправляемое сообщение, подробнее см. описание функции ИнициализироватьСообщение.
//  ПрерыватьПриОшибке - Булево - определяет поведение при возникновении ошибки при отправке отдельному пользователю.
//                                Истина - в случае возникновения ошибки отправка остальным пользователям будет
//                                прервана. Ложь - в случае возникновения ошибки отправка продолжится остальным
//                                пользователям.
// 
// Возвращаемое значение:
//  Соответствие - результаты отправки сообщения каждому пользователю. Ключом является идентификатор пользователя,
//                 значением - результат отправки сообщения этому пользователю. Подробнее см. описание функции
//                 ОтправитьУведомление. В случае возникновения ошибки, если значение параметра ПрерыватьПриОшибке
//                 установлено Истина, то пользователи, которым не были отправлены сообщения в результатах будут
//                 отсутстовать.
//
Функция ОтправитьУведомлениеНесколькимПользователям(ИдентификаторыПолучателей, Сообщение, ПрерыватьПриОшибке = Ложь) Экспорт
	
	РезультатыОтправки = Новый Соответствие;
	
	Для каждого ИдентификаторПолучателя Из ИдентификаторыПолучателей Цикл
		
		Получатель = pns4ones_СервисУведомленийКлиентСервер.ПолучательПользователь(ИдентификаторПолучателя);
		Результат = ОтправитьУведомление(Получатель, Сообщение);
		
		РезультатыОтправки.Вставить(ИдентификаторПолучателя, Результат);
		
		Если Не Результат.Успешно И ПрерыватьПриОшибке Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатыОтправки;
	
КонецФункции

// Возвращает идентификатор пользователя информационной базы, который используется для отправки уведомления.
//
// Параметры:
//  ИмяПользователя - Строка - имя пользователя информационной базы, идентификатор которого необходимо получить. Если
//                             имя не указано, то будет возвращен идентификатор текущего пользователя.
// 
// Возвращаемое значение:
//  Строка - идентификатор пользователя информационной базы.
//
Функция ПолучитьИдентификаторПользователя(ИмяПользователя = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПользовательИБ = ?(ИмяПользователя <> Неопределено,
		ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя),
		ПользователиИнформационнойБазы.ТекущийПользователь()
	);
	
	Если ПользовательИБ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Строка(ПользовательИБ.УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Записывает ключ клиента получения уведолений в безопасное хранилище. Перед вызовом должен быть установлен
// привилегированный режим.
//
// Параметры:
//  КлючКлиента - Строка - ключ клиента получения уведомлений.
//
Процедура ЗаписатьКлючКлиентаПолученияУведомлений(КлючКлиента) Экспорт
	
	pns4ones_СервисУведомленийПереопределяемый.ЗаписатьКлючКлиентаПолученияУведомлений(КлючКлиента);
	
КонецПроцедуры

// Записывает ключ сервера отправления уведолений в безопасное хранилище. Перед вызовом должен быть установлен
// привилегированный режим.
//
// Параметры:
//  КлючСервера - Строка - ключ сервера отправления уведомлений.
//
Процедура ЗаписатьКлючСервераОтправленияУведомлений(КлючСервера) Экспорт
	
	pns4ones_СервисУведомленийПереопределяемый.ЗаписатьКлючСервераОтправленияУведомлений(КлючСервера);
	
КонецПроцедуры

// Выполняет чтение из безопасного хранилища ключа клиента получения уведолений и возвращает прочитанное значение.
// Перед вызовом должен быть установлен привилегированный режим.
// 
// Возвращаемое значение:
//  Строка - ключ клиента получения уведомлений.
//
Функция ПрочитатьКлючКлиентаПолученияУведомлений() Экспорт
	
	Возврат pns4ones_СервисУведомленийПереопределяемый.ПрочитатьКлючКлиентаПолученияУведомлений();
	
КонецФункции

// Выполняет чтение из безопасного хранилища ключа сервера отправления уведолений и возвращает прочитанное значение.
// Перед вызовом должен быть установлен привилегированный режим.
// 
// Возвращаемое значение:
//  Строка - ключ сервера отправления уведомлений.
//
Функция ПрочитатьКлючСервераОтправленияУведомлений() Экспорт
	
	Возврат pns4ones_СервисУведомленийПереопределяемый.ПрочитатьКлючСервераОтправленияУведомлений();
	
КонецФункции

// Выполняет сброс ранее установленного ключа доступа к серверу отправления уведомлений. Перед вызовом должен быть
// установлен привилегированный режим.
//
Процедура СброситьКлючДоступаКСерверуОтправленияУведомлений() Экспорт
	
	ПустойКлючДоступа = Новый Структура;
	ПустойКлючДоступа.Вставить("КлючДоступа", "");
	ПустойКлючДоступа.Вставить("СрокДействия", '00010101');
	
	ЗаписатьКлючДоступаКСерверуОтправленияУведомлений(ПустойКлючДоступа);
	
КонецПроцедуры

// Возвращает настройки сервера выполняющего отправку уведомлений клиентским сеансам 1С.
// 
// Возвращаемое значение:
//  Структура - настройки сервера отправки уведомлений:
//   * АдресСервера - Строка  - адрес сервера отправки уведомлений;
//   * Порт - Строка - номер порта сервера отправки уведомлений;
//   * ИспользоватьЗащищенноеСоединение - Булево - признак использования защищенного соединения (HTTPS).
//
Функция НастройкиСервераОтправкиУведомлений() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("АдресСервера", "");
	Результат.Вставить("Порт", "36696"); // Номер порта, используемый по умолчанию.
	Результат.Вставить("ИспользоватьЗащищенноеСоединение", Ложь);
	
	ЗаписьРегистра = РегистрыСведений.pns4ones_НастройкиСервисаУведомлений.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.Прочитать();
	
	Если ЗаписьРегистра.Выбран() Тогда
		
		Результат.ИспользоватьЗащищенноеСоединение = ЗаписьРегистра.ИспользоватьЗащищенноеСоединение;
		Результат.АдресСервера = СокрЛП(ЗаписьРегистра.АдресСервераОтправленияУведомлений);
		
		Поз = СтрНайти(Результат.АдресСервера, ":");
		Если Поз > 0 Тогда
			Результат.Порт = Сред(Результат.АдресСервера, Поз + 1);
			Результат.АдресСервера = Лев(Результат.АдресСервера, Поз - 1);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает настройки сервиса уведомлений.
// 
// Возвращаемое значение:
//  Структура - настройки сервиса уведомлений:
//   * Используется - Булево - признак использования сервиса уведомлений в информационной базе;
//   * ИдентификаторПриложения - Строка - идентификатор приложения сервиса уведомлений;
//   * АдресСервера - Строка - адрес сервера, к которому подключаются клиентские сеансы 1С для получения сообщений;
//   * Порт - Строка - номер порта сервера отправки уведомлений.
//
Функция НастройкиСервисаУведомлений() Экспорт
	
	Настройки = Новый Структура;
	Настройки.Вставить("Используется", Ложь);
	Настройки.Вставить("ИдентификаторПриложения", "");
	Настройки.Вставить("АдресСервера", "");
	Настройки.Вставить("Порт", "36695"); // Номер порта, используемый по умолчанию.
	
	ЗаписьРегистра = РегистрыСведений.pns4ones_НастройкиСервисаУведомлений.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.Прочитать();
	
	Если ЗаписьРегистра.Выбран() Тогда
		
		Настройки.Используется = ЗаписьРегистра.ИспользоватьСервисУведомлений
			И Не ПустаяСтрока(ЗаписьРегистра.АдресСервераПолученияУведомлений)
			И Не ПустаяСтрока(ЗаписьРегистра.ИдентификаторПриложения);
		
		Если Настройки.Используется Тогда
			УстановитьПривилегированныйРежим(Истина);
			Если Не ЗначениеЗаполнено(ПрочитатьКлючКлиентаПолученияУведомлений()) Тогда
				Настройки.Используется = Ложь;
			КонецЕсли;
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		
		Настройки.ИдентификаторПриложения = ЗаписьРегистра.ИдентификаторПриложения;
		Настройки.АдресСервера = СокрЛП(ЗаписьРегистра.АдресСервераПолученияУведомлений);
		
		Поз = СтрНайти(Настройки.АдресСервера, ":");
		Если Поз > 0 Тогда
			Настройки.Порт = Сред(Настройки.АдресСервера, Поз + 1);
			Настройки.АдресСервера = Лев(Настройки.АдресСервера, Поз - 1);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет обновление ключа доступа к серверу отправления уведомлений.
//
// Параметры:
//  СоединениеССервером	- HTTPСоединение - соединение с сервером отправления уведомлений. Подробнее см. описание
//                                         СоздатьСоединениеССерверомОтправленияУведомлений.
// 
// Возвращаемое значение:
//  Строка - новое значение ключа доступа, полученное в результате обновления.
//
Функция ОбновитьКлючДоступаКСерверуОтправленияУведомлений(СоединениеССервером)
	
	УстановитьПривилегированныйРежим(Истина);
	КлючСервера = ПрочитатьКлючСервераОтправленияУведомлений();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ЗначениеЗаполнено(КлючСервера) Тогда
		ВызватьИсключение НСтр("ru='В настройках сервиса уведомлений не указан ключ сервера отправления уведомлений.'");
	КонецЕсли;
	
	Запрос = Новый HTTPЗапрос("auth?server_key=" + КлючСервера);
	Ответ = СоединениеССервером.Получить(Запрос);	
	
	ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
	
	Успешно = (Ответ.КодСостояния >= 200 И Ответ.КодСостояния < 400);
	Если Не Успешно Тогда
		
		Если Ответ.КодСостояния = 401 Тогда
			ТекстОшибки = НСтр("ru='В настройках сервиса уведомлений указан неверный ключ сервера отправления уведомлений.'");
		Иначе
			ТекстОшибки = СтрШаблон(НСтр("ru='Код состояния %1'"), Ответ.КодСостояния);
			Если ЗначениеЗаполнено(ТелоОтвета) Тогда
				ТекстОшибки = ":"  + Символы.ПС + ТелоОтвета;
			КонецЕсли;
		КонецЕсли;
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	ДанныеКлючаДоступа = pns4ones_СервисУведомленийКлиентСервер.СтрокаJSONВСтруктуру(ТелоОтвета);
	
	КлючДоступа = Новый Структура;
	КлючДоступа.Вставить("КлючДоступа", ДанныеКлючаДоступа.access_token);
	КлючДоступа.Вставить("СрокДействия", Дата(1, 1, 1) + ДанныеКлючаДоступа.expires_in);
	
	УстановитьПривилегированныйРежим(Истина);
	ЗаписатьКлючДоступаКСерверуОтправленияУведомлений(КлючДоступа);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат КлючДоступа;
	
КонецФункции

// Выполняет проверку текущего ключа доступа к серверу отправления уведомлений. Возвращает Истина, если ключ установлен
// и срок действия ключа не истёк.
//
// Параметры:
//  ДанныеКлюча - Структура - данные ключа доступа к серверу отправления уведомлений. Подробнее см. описание
//                            ПрочитатьКлючДоступаКСерверуОтправленияУведомлений.
// 
// Возвращаемое значение:
//  Булево - Истина, если ключ установлен и срок его действия не истёк.
//
Функция ПроверитьКлючДоступаКСерверуОтправленияУведомлений(ДанныеКлюча)
	
	Возврат ДанныеКлюча <> Неопределено
				И ДанныеКлюча.СрокДействия > ТекущаяУниверсальнаяДата();
	
КонецФункции

// Выполняет запись ключа доступа к серверу отправления уведомлений в безопасное хранилище. Перед вызовом должен быть 
// установлен привилегированный режим.
//
// Параметры:
//  КлючДоступа - Структура - данные ключа доступа к серверу отправления уведомлений. Подробнее см. описание
//                            ПрочитатьКлючДоступаКСерверуОтправленияУведомлений.
//
Процедура ЗаписатьКлючДоступаКСерверуОтправленияУведомлений(КлючДоступа)

	pns4ones_СервисУведомленийПереопределяемый.ЗаписатьКлючДоступаКСерверуОтправленияУведомлений(КлючДоступа);

КонецПроцедуры

// Выполняет чтение из безопасного хранилища ключа доступа к серверу отправления уведомлений и возвращает прочитанное
// значение. Перед вызовом должен быть установлен привилегированный режим.
// 
// Возвращаемое значение:
//  Структура - данные ключа доступа:
//   * КлючДоступа - Строка - значение ключа доступа;
//   * СрокДействия - Дата - срок действия ключа.
//
Функция ПрочитатьКлючДоступаКСерверуОтправленияУведомлений()
	
	Возврат pns4ones_СервисУведомленийПереопределяемый.ПрочитатьКлючДоступаКСерверуОтправленияУведомлений();
	
КонецФункции

// Создает соединение с сервером отправления уведомлений по заданным настройкам.
//
// Параметры:
//  НастройкиСервера - Структура - настройки подключения к серверу отправления уведомлений.
// 
// Возвращаемое значение:
//  HTTPСоединение - соединение с сервером отправления уведомлений. Используется для вызова HTTP методов сервера.
//
Функция СоздатьСоединениеССерверомОтправленияУведомлений(НастройкиСервера)

	Если ПустаяСтрока(НастройкиСервера.АдресСервера) Тогда
		ВызватьИсключение НСтр("ru='В настройках сервиса уведомлений не указан адрес сервера отправления уведомлений.'");
	КонецЕсли;
	
	ПортСервера = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(НастройкиСервера.Порт);
	Если ПортСервера = Неопределено Тогда
		ВызватьИсключение НСтр("ru='В настройках сервиса уведомлений неверно указан номер порта сервера отправления уведомлений: значение должно быть числом.'");
	КонецЕсли;
	
	ЗащищенноеСоединение = ?(НастройкиСервера.ИспользоватьЗащищенноеСоединение,
		Новый ЗащищенноеСоединениеOpenSSL,
		Неопределено
	);
	Возврат Новый HTTPСоединение(
		НастройкиСервера.АдресСервера,
		ПортСервера, , , , ,
		ЗащищенноеСоединение
	);
	
КонецФункции

Функция СкопироватьСтруктуру(ИсходнаяСтруктура)
	
	Результат = Новый Структура;
	
	Для каждого КлючЗначение Из ИсходнаяСтруктура Цикл
		Результат.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Преобразует структуру, описывающую получателя и отправляемое сообщение в строку формата JSON, принимаемую сервисом
// уведомлений.
//
// Параметры:
//  Получатель - Структура - структура, описывающая получателя уведомления. В качестве получателя могут выступать:
//                           отдельный пользователь информационной базы, группа пользователей или все пользователи
//                           информационной базы. Подробнее см. функции ПолучательПользователь,
//                           ПолучательГруппаПользователей и ПолучательВсеПользователи.
//  Сообщение - Структура - структура, описывающая отправляемой сообщение Подробнее см. описание функции
//                          ИнициализироватьСообщение.
// 
// Возвращаемое значение:
//  Строка - строка формата JSON для отправки сервису уведомлений.
//
Функция СообщениеВJSON(Получатель, Сообщение)
	
	ОтправляемоеСообщение = Новый Структура;
	
	Если Сообщение.Свойство("Тема") Тогда
		ОтправляемоеСообщение.Вставить("Topic", Сообщение.Тема);
	КонецЕсли;
	
	Если Сообщение.Свойство("Оповещение") И ТипЗнч(Сообщение.Оповещение) = Тип("Структура") Тогда
		
		ОтправляемоеСообщение.Вставить("Notification", Новый Структура);
		
		Если Сообщение.Оповещение.Свойство("Текст") Тогда
			ОтправляемоеСообщение.notification.Вставить("Title", Сообщение.Оповещение.Текст);
		КонецЕсли;
		Если Сообщение.Оповещение.Свойство("Пояснение") Тогда
			ОтправляемоеСообщение.notification.Вставить("Body", Сообщение.Оповещение.Пояснение);
		КонецЕсли;
		Если Сообщение.Оповещение.Свойство("Картинка") Тогда
			ОтправляемоеСообщение.notification.Вставить("Icon", Сообщение.Оповещение.Картинка);
		КонецЕсли;
		Если Сообщение.Оповещение.Свойство("ДействиеПриНажатии") Тогда
			ОтправляемоеСообщение.notification.Вставить("Action", Сообщение.Оповещение.ДействиеПриНажатии);
		КонецЕсли;
		Если Сообщение.Оповещение.Свойство("Статус") Тогда
			ОтправляемоеСообщение.notification.Вставить("Important", Сообщение.Оповещение.Статус = СтатусОповещенияПользователя.Важное);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Сообщение.Свойство("Данные") И ТипЗнч(Сообщение.Данные) = Тип("Структура") Тогда
		ОтправляемоеСообщение.Вставить("Data", Сообщение.Данные);
	КонецЕсли;
	
	ОтправляемыеДанные = Новый Структура;
	ОтправляемыеДанные.Вставить("Recipient", СкопироватьСтруктуру(Получатель));
	ОтправляемыеДанные.Вставить("Message", ОтправляемоеСообщение);
	
	Возврат pns4ones_СервисУведомленийКлиентСервер.СтруктураВСтрокуJSON(ОтправляемыеДанные);
	
КонецФункции

// Создает структуру, описывающую успешный результат отправки уведомления.
//
// Возвращаемое значение:
//  Структура - структура, описывающая успешный результат отправки уведомления.
//              Подробнее см. описание функциии ОтправитьУведомление.
//
Функция РезультатОтправкиУведомленияУспешно()
	
	Возврат Новый Структура("Успешно", Истина);
	
КонецФункции

// Создает структуру, описывающую ошибку отправки уведомления.
//
// Параметры:
//  ТекстОшибки - Строка - текст ошибки, возникшей при отправке уведомления.
// 
// Возвращаемое значение:
//  Структура - структура, описывающая ошибку отправки уведомления.
//              Подробнее см. описание функциии ОтправитьУведомление.
//
Функция РезультатОтправкиУведомленияОшибка(ТекстОшибки)
	
	Возврат Новый Структура("Успешно, ТекстОшибки", Ложь, ТекстОшибки);
	
КонецФункции

#КонецОбласти