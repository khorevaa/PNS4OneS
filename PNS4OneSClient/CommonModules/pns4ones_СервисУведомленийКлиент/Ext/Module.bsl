///////////////////////////////////////////////////////////////////////////////////////////////////////
// (с) Tolkachev Pavel, 2021-2022
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Выполняет фоновую отправку уведомления отдельному пользователю информационной базы.
//
// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения - содержит описание процедуры, которая будет выполнена после обработки
//                                               результата выполнения фонового задания. Подробнее см. описание функции
//                                               НачатьОтправкуУведомления.
//  ИдентификаторПользователя - Строка - идентификатор пользователя информационной базы, которому необходимо отправить
//                                       уведомление.
//  Сообщение - Структура - отправляемое сообщение, подробнее см. описание функции ИнициализироватьСообщение.
//  ВыводитьОкноОжидания - Булево - если Истина, то открыть окно ожидания с визуальной индикацией длительной операции.
//                                  Если используется собственный механизм индикации, то следует указать Ложь.
//  ТекстСообщения - Строка - если параметр ВыводитьОкноОжидания = Истина, то в данный параметр может быть передан текст
//                            сообщения, который будет выведен в окне ожидания. Если параметр не указан, то будет
//                            выведено стандартное сообщение.
//
Процедура НачатьОтправкуУведомленияПользователю(
	ОповещениеОЗавершении = Неопределено,
	ИдентификаторПользователя,
	Сообщение,
	ВыводитьОкноОжидания = Ложь,
	ТекстСообщения = Неопределено
) Экспорт
	
	Получатель = pns4ones_СервисУведомленийКлиентСервер.ПолучательПользователь(ИдентификаторПользователя);
	НачатьОтправкуУведомления(
		ОповещениеОЗавершении,
		Получатель,
		Сообщение,
		ВыводитьОкноОжидания,
		ТекстСообщения
	);
	
КонецПроцедуры

// Выполняет фоновую отправку уведомления группе пользователей информационной базы.
//
// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения - содержит описание процедуры, которая будет выполнена после обработки
//                                               результата выполнения фонового задания. Подробнее см. описание функции
//                                               НачатьОтправкуУведомления.
//  ГруппаПользователей - Строка - группа пользователей, которым необходимо отправить уведомление.
//                                       уведомление.
//  Сообщение - Структура - отправляемое сообщение, подробнее см. описание функции ИнициализироватьСообщение.
//  ВыводитьОкноОжидания - Булево - если Истина, то открыть окно ожидания с визуальной индикацией длительной операции.
//                                  Если используется собственный механизм индикации, то следует указать Ложь.
//  ТекстСообщения - Строка - если параметр ВыводитьОкноОжидания = Истина, то в данный параметр может быть передан текст
//                            сообщения, который будет выведен в окне ожидания. Если параметр не указан, то будет
//                            выведено стандартное сообщение.
//
Процедура НачатьОтправкуУведомленияГруппеПользователей(
	ОповещениеОЗавершении = Неопределено,
	ГруппаПользователей,
	Сообщение,
	ВыводитьОкноОжидания = Ложь,
	ТекстСообщения = Неопределено
) Экспорт

	Получатель = pns4ones_СервисУведомленийКлиентСервер.ПолучательГруппаПользователей(ГруппаПользователей);
	НачатьОтправкуУведомления(
		ОповещениеОЗавершении,
		Получатель,
		Сообщение,
		ВыводитьОкноОжидания,
		ТекстСообщения
	);
	
КонецПроцедуры

// Выполняет фоновую отправку уведомления всем пользователям информационной базы.
//
// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения - содержит описание процедуры, которая будет выполнена после обработки
//                                               результата выполнения фонового задания. Подробнее см. описание функции
//                                               НачатьОтправкуУведомления.
//  Сообщение - Структура - отправляемое сообщение, подробнее см. описание функции ИнициализироватьСообщение.
//  ВыводитьОкноОжидания - Булево - если Истина, то открыть окно ожидания с визуальной индикацией длительной операции.
//                                  Если используется собственный механизм индикации, то следует указать Ложь.
//  ТекстСообщения - Строка - если параметр ВыводитьОкноОжидания = Истина, то в данный параметр может быть передан текст
//                            сообщения, который будет выведен в окне ожидания. Если параметр не указан, то будет
//                            выведено стандартное сообщение.
//
Процедура НачатьОтправкуУведомленияВсемПользователям(
	ОповещениеОЗавершении = Неопределено,
	Сообщение,
	ВыводитьОкноОжидания = Ложь,
	ТекстСообщения = Неопределено
) Экспорт

	Получатель = pns4ones_СервисУведомленийКлиентСервер.ПолучательВсеПользователи();
	НачатьОтправкуУведомления(
		ОповещениеОЗавершении,
		Получатель,
		Сообщение,
		ВыводитьОкноОжидания,
		ТекстСообщения
	);
	
КонецПроцедуры

// Подключает обработчик, который будет вызван при появлении новых уведомлений.
//
// Параметры:
//  Обработчик - ОписаниеОповещения - содержит описание процедуры, которая будет вызвана при появлении новых
//	                                  уведомлений со следующими параметрами:
//   * Сообщение - Структура - структура, содержащая данные принятого уведомления. Подробнее см. описание
//                             ИнициализироватьСообщение.
//   * ДополнительныеПараметры - Произвольный - значение, которое было указано при создании объекта ОписаниеОповещения.
//  Тема - Строка - необязательный, если указан, то обработчик будет вызван лишь для тех уведомлений, которые
//                  относятся к этой теме.
//
Процедура ПодключитьОбработчикУведомлений(Обработчик, Тема = Неопределено) Экспорт
	
	ОписаниеОбработчика = Новый Структура;
	ОписаниеОбработчика.Вставить("Обработчик", Обработчик);
	ОписаниеОбработчика.Вставить("Тема", Тема);
	
	глПараметрыСервисаУведомлений.Обработчики.Добавить(ОписаниеОбработчика);
	
КонецПроцедуры

// Отключает ранее подключенный обработчик новых уведомлений.
//
// Параметры:
//  Обработчик - ОписаниеОповещения - описание процедуры, заданной при вызове ПодключитьОбработчикУведомлений.
//
Процедура ОтключитьОбработчикУведомлений(Обработчик) Экспорт
	
	Для Индекс = 0 По глПараметрыСервисаУведомлений.Обработчики.ВГраница() Цикл
		
		ОписаниеОбработчика = глПараметрыСервисаУведомлений.Обработчики[Индекс];
		Если ОписаниеОбработчика.Обработчик.ИмяПроцедуры = Обработчик.ИмяПроцедуры
				И ОписаниеОбработчика.Обработчик.Модуль = Обработчик.Модуль
				И ОписаниеОбработчика.Обработчик.ИмяПроцедурыОбработкиОшибки = Обработчик.ИмяПроцедурыОбработкиОшибки
				И ОписаниеОбработчика.Обработчик.МодульОбработкиОшибки = Обработчик.МодульОбработкиОшибки
		Тогда
			глПараметрыСервисаУведомлений.Обработчики.Удалить(Индекс);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Начинает подключение компоненты сервиса уведомлений.
//
// Параметры:
//  УстановитьКомпоненту - Булево - если значение Истина, то в случае ошибки подключения компоненты, будет предпринята
//	                                попытка её установки.
//
Процедура НачатьПодключениеКомпоненты(УстановитьКомпоненту = Истина) Экспорт
	
	ДопПараметры = Новый Структура("УстановитьКомпоненту", УстановитьКомпоненту);
	Оповещение = Новый ОписаниеОповещения("ПодключениеКомпонентыЗавершение", ЭтотОбъект, ДопПараметры);
	
	НачатьПодключениеВнешнейКомпоненты(
		Оповещение, 
		МестоположениеКомпоненты(),
		"com_ptolkachev_PNS4OneSCompExtension",
		ТипВнешнейКомпоненты.Native
	);
	
КонецПроцедуры

// Начинает проверку подключения компоненты сервиса уведомлений.
//
// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения - содержит описание процедуры, которая будет вызвана после завершения со
//                                               следующими параметрами:
//   * Подключено - Булево - содержит Истина, если компонента подключена;
//   * ДополнительныеПараметры - Произвольный - значение, которое было указано при создании объекта
//                                              ОповещениеОЗавершении.
//
Процедура НачатьПроверкуПодключенияКомпоненты(ОповещениеОЗавершении) Экспорт
	
	НачатьПодключениеВнешнейКомпоненты(
		ОповещениеОЗавершении,
		МестоположениеКомпоненты(),
		"com_ptolkachev_PNS4OneSCompExtension",
		ТипВнешнейКомпоненты.Native
	);
	
КонецПроцедуры

// Выполняет обработку сообщений, полученных от сервиса уведомлений.
//
// Параметры:
//  Данные - Строка - строка в формате JSON, содержащая данные, полученные от сервиса уведомлений.
//
Процедура ОбработатьСообщение(Знач Данные) Экспорт
	
	Попытка
		
		СтруктураДанных = pns4ones_СервисУведомленийКлиентСервер.СтрокаJSONВСтруктуру(Данные);
		
		Если СтруктураДанных.Свойство("error") Тогда
			ОбработатьОшибкуСервисаУведомлений(СтруктураДанных.error);
			Возврат;
		КонецЕсли;
		
		Сообщение = ДанныеСервисаВСообщение(СтруктураДанных);
		
	Исключение
		
		ОписаниеОшибки = СтрШаблон(
			НСтр("ru='Получено неверное сообщение от сервиса: %1'"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		pns4ones_СервисУведомленийВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(ОписаниеОшибки);
		Возврат;
		
	КонецПопытки;
	
	Для каждого ОписаниеОбработчика Из глПараметрыСервисаУведомлений.Обработчики Цикл
		
		Если Не ЗначениеЗаполнено(ОписаниеОбработчика.Тема)
				Или ОписаниеОбработчика.Тема = Сообщение.Тема
		Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОбработчика.Обработчик, Сообщение);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Сообщение.СтандартнаяОбработка И Сообщение.Оповещение <> Неопределено Тогда
		ПоказатьОповещениеПользователя(
			Сообщение.Оповещение.Текст,
			Сообщение.Оповещение.ДействиеПриНажатии,
			Сообщение.Оповещение.Пояснение,
			Сообщение.Оповещение.Картинка,
			Сообщение.Оповещение.Статус
		);
	КонецЕсли;
		
КонецПроцедуры

// Кеширует параметры сервиса уведомлений в глобальной переменной глПараметрыСервисаУведомлений.
// Подробнее см. описание pns4ones_СервисУведомленийВызовСервера.ПолучитьПараметрыСервисаУведомлений.
//
Процедура УстановитьПараметрыСервисаУведомлений() Экспорт
	
	глПараметрыСервисаУведомлений = pns4ones_СервисУведомленийВызовСервера.ПолучитьПараметрыСервисаУведомлений();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УстановкаИПодключениеКомпоненты

Процедура ОбработатьЗавершениеПодключенияКомпоненты(РезультатПодключения)
	
	Если РезультатПодключения.Успешно Тогда
		
		глПараметрыСервисаУведомлений.Компонента = РезультатПодключения.Компонента;
		глПараметрыСервисаУведомлений.ПодключениеУстановлено = Истина;
		
		Оповестить("pns4ones_ПодключениеКСервисуУстановлено");
		
	Иначе
		
		ПоказатьОповещениеПользователя(
			НСтр("ru='Прием push-уведомлений не доступен!'"), ,
			РезультатПодключения.ОписаниеОшибки,
			БиблиотекаКартинок.ДиалогВосклицание,
			СтатусОповещенияПользователя.Важное
		);
		
		Оповестить("pns4ones_ОшибкаПриПодключенииКСервису");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодключениеКомпонентыЗавершение(Подключено, ДопПараметры) Экспорт
	
	Если Не Подключено Тогда
		
		Если ДопПараметры.УстановитьКомпоненту Тогда
			
			Оповещение = Новый ОписаниеОповещения("УстановкаКомпонентыЗавершение", ЭтотОбъект);
			НачатьУстановкуВнешнейКомпоненты(Оповещение, МестоположениеКомпоненты());
			
		Иначе
			
			Результат = Новый Структура;
			Результат.Вставить("Успешно", Ложь);
			Результат.Вставить("ОписаниеОшибки", НСтр("ru='Произошла ошибка при подключении компоненты сервиса уведомлений.'"));
			
			ОбработатьЗавершениеПодключенияКомпоненты(Результат);
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Попытка
		
		Компонента = Новый("AddIn.com_ptolkachev_PNS4OneSCompExtension.com_ptolkachev_PNS4OneSCompExtension");
		
	Исключение
		
		ОписаниеОшибки = СтрШаблон(
			НСтр("ru='Произошла ошибка при подключении компоненты сервиса уведомлений: %1.'"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		
		Результат = Новый Структура;
		Результат.Вставить("Успешно", Ложь);
		Результат.Вставить("ОписаниеОшибки", ОписаниеОшибки);
		
		ОбработатьЗавершениеПодключенияКомпоненты(Результат);
		Возврат;
		
	КонецПопытки;
	
	ДанныеДляПодключения = pns4ones_СервисУведомленийВызовСервера.ДанныеПользователяДляПодключенияКСервису();
	
	// Для реализации безопасной передачи ключа с сервера на клиент был использован "костыль" в виде вызова
	// исключения. Информация об ошибке, полученная при вызове исключения используется функцией
	// ПрочитатьКлючКлиентаПолученияУведомлений для проверки имени модуля, из которого произошёл вызов. Таким образом,
	// ключ будет получен только при вызове функции ПрочитатьКлючКлиентаПолученияУведомлений из данного модуля. При
	// попытке получить ключ из любого другого кода приведёт к Исключению.
	Попытка
		ВызватьИсключение "ПроверкаВызова"
	Исключение
		ИнформацияОбОшибкеПроверкаВызова = ИнформацияОбОшибке();
	КонецПопытки;
	
	КлючКлиента = pns4ones_СервисУведомленийВызовСервера.ПрочитатьКлючКлиентаПолученияУведомлений(
		ИнформацияОбОшибкеПроверкаВызова
	);
	
	Оповещение = Новый ОписаниеОповещения("ПодключениеКомпонентыКСервисуЗавершение", ЭтотОбъект, Компонента);
	Компонента.НачатьВызовПодключить(
		Оповещение,
		глПараметрыСервисаУведомлений.АдресСервера,
		глПараметрыСервисаУведомлений.Порт,
		глПараметрыСервисаУведомлений.ИдентификаторПриложения,
		ДанныеДляПодключения.ИдентификаторИБ,
		ДанныеДляПодключения.ИдентификаторПользователя,
		ДанныеДляПодключения.ГруппаПользователя,
		КлючКлиента
	);
	
КонецПроцедуры

Процедура УстановкаКомпонентыЗавершение(ДопПараметры) Экспорт
	
	НачатьПодключениеКомпоненты(Ложь);
	
КонецПроцедуры

Процедура ПодключениеКомпонентыКСервисуЗавершение(Подключено, ПараметрыВызова, Компонента) Экспорт
	
	Если Не Подключено Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПолучениеОшибкиПодключенияКСервисуЗавершение", ЭтотОбъект);
		НачатьПолучениеОшибки(Компонента, Оповещение);
		Возврат;
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Успешно", Истина);
	Результат.Вставить("Компонента", Компонента);
	
	ОбработатьЗавершениеПодключенияКомпоненты(Результат);
	
КонецПроцедуры

Процедура ПолучениеОшибкиПодключенияКСервисуЗавершение(ОписаниеОшибки, ДопПараметры) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Успешно", Ложь);
	Результат.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	
	ОбработатьЗавершениеПодключенияКомпоненты(Результат);
	
КонецПроцедуры

Процедура НачатьПолучениеОшибки(Компонента, ОповещениеОЗавершении)
	
	ДопПараметры = Новый Структура("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Оповещение = Новый ОписаниеОповещения("ПолучениеОшибкиЗавершение", ЭтотОбъект, ДопПараметры);
	Компонента.НачатьВызовПолучитьОшибку(Оповещение);
	
КонецПроцедуры

Процедура ПолучениеОшибкиЗавершение(РезультатВыполнения, ПараметрыВызова, ДопПараметры) Экспорт
	
	ВыполнитьОбработкуОповещения(ДопПараметры.ОповещениеОЗавершении, РезультатВыполнения);
	
КонецПроцедуры

#КонецОбласти

// Выполняет отправку фоновую отправку уведомления.
//
// Параметры:
//  Получатель - Структура - структура, описывающая получателя уведомления. Подробнее см. описание функции
//                           pns4ones_СервисУведомлений.ОтправитьУведомление.
//  Сообщение - Структура - структура, описывающая отправляемой сообщение Подробнее см. описание функции
//                          pns4ones_СервисУведомленийКлиентСервер.ИнициализироватьСообщение.
//  ВыводитьОкноОжидания - Булево - если Истина, то открыть окно ожидания с визуальной индикацией длительной операции.
//                                  Если используется собственный механизм индикации, то следует указать Ложь.
//  ОповещениеОЗавершении - ОписаниеОповещения - содержит описание процедуры, которая будет выполнена после выполнения
//                                               фонового задания со следующими параметрами:
//   * РезультатОтправкиУведомления - Структура - структура, описывающая результат отправки уведомления. Подробнее см.
//                                    описание функции pns4ones_СервисУведомлений.ОтправитьУведомление.
//   * ДополнительныеПараметры - Произвольный - значение, которое было передано при создании объекта ОписаниеОповещения.
//
Процедура НачатьОтправкуУведомления(
	ОповещениеОЗавершении,
	Получатель,
	Сообщение,
	ВыводитьОкноОжидания,
	ТекстСообщения
) Экспорт
	
	ДлительнаяОперация = pns4ones_СервисУведомленийВызовСервера.НачатьОтправкуУведомления(
		Получатель,
		Сообщение,
		Новый УникальныйИдентификатор
	);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьОкноОжидания = ВыводитьОкноОжидания;
	ПараметрыОжидания.ТекстСообщения = ?(ЗначениеЗаполнено(ТекстСообщения),
		ТекстСообщения,
		НСтр("ru='Выполняется отправка уведомления...'")
	);
	
	Оповещение = Новый ОписаниеОповещения("ПриЗавершенииОтправкиУведомления", ЭтотОбъект, ОповещениеОЗавершении);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

// Обработчик оповещения, вызываемый при окончании фоновой отправки уведомления.
//
// Параметры:
//  РезультатВыполненияЗадания - Структура - структура, описывающая результат выполнения фонового задания отправки
//                                           уведомления.
//  ОповещениеОЗавершении - ОписаниеОповещения - содержит описание процедуры, которая будет выполнена после обработки
//                                               результата выполнения фонового задания. Подробнее см. описание функции
//                                               НачатьОтправкуУведомления.
//
Процедура ПриЗавершенииОтправкиУведомления(РезультатВыполненияЗадания, ОповещениеОЗавершении) Экспорт
	
	Если РезультатВыполненияЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВыполненияЗадания = "Ошибка" Тогда
		ВызватьИсключение РезультатВыполненияЗадания.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	РезультатОтправкиУведомления = ПолучитьИзВременногоХранилища(РезультатВыполненияЗадания.АдресРезультата);
	УдалитьИзВременногоХранилища(РезультатВыполненияЗадания.АдресРезультата);
	
	Если ОповещениеОЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатОтправкиУведомления);
	КонецЕсли;
	
КонецПроцедуры

// Преобразует данные, полученные от сервиса уведомлений в структуру, описывающую полученное сообщение.
//
// Параметры:
//  Данные - Структура - данные, полученные от сервиса уведомлений.
// 
// Возвращаемое значение:
//  Структура - структура, описывающая данные, полученные от сервиса уведомлений. Подробнее см. описание
//              ИнициализироватьСообщение.
//
Функция ДанныеСервисаВСообщение(Знач Данные)
	
	Сообщение = pns4ones_СервисУведомленийКлиентСервер.ИнициализироватьСообщение();
	
	Данные.Свойство("topic", Сообщение.Тема);
	Данные.Свойство("data", Сообщение.Данные);
	
	Если Данные.Свойство("notification") Тогда
		
		Оповещение = pns4ones_СервисУведомленийКлиентСервер.ИнициализироватьОповещение();
		Данные.notification.Свойство("title", Оповещение.Текст);
		Данные.notification.Свойство("body", Оповещение.Пояснение);
		
		Если Данные.notification.Свойство("icon") И ЗначениеЗаполнено(Данные.notification.icon) Тогда
			
			Попытка
				ДвоичныеДанные = БиблиотекаКартинок[Данные.notification.icon].ПолучитьДвоичныеДанные();
				Оповещение.Картинка = Новый Картинка(ДвоичныеДанные);
			Исключение
				// Картинки нет - игнорируем.
			КонецПопытки;
			
		КонецЕсли;
		
		Важное = Данные.notification.Свойство("important") И Данные.notification.important;
		Оповещение.Статус = ?(Важное, СтатусОповещенияПользователя.Важное, СтатусОповещенияПользователя.Информация);
		
		Данные.notification.Свойство("action", Оповещение.ДействиеПриНажатии);
		
		Сообщение.Оповещение = Оповещение;
		
	КонецЕсли;
	
	Возврат Сообщение;
	
КонецФункции

Процедура ОбработатьОшибкуСервисаУведомлений(ТекстСообщения)
	
	ПоказатьОповещениеПользователя(
		НСтр("ru='Ошибка сервиса push-уведомлений'"), ,
		ТекстСообщения + "." + Символы.ПС + НСтр("ru='Прием новых уведомлений прекращен.'"),
		БиблиотекаКартинок.ДиалогВосклицание,
		СтатусОповещенияПользователя.Важное
	);
	
	глПараметрыСервисаУведомлений.ПодключениеУстановлено = Ложь;
	
	Оповестить("pns4ones_СервисУведомленийОтключен");
			
КонецПроцедуры

Функция МестоположениеКомпоненты()
	
	Возврат "ОбщийМакет.PNS4OneSComp";
	
КонецФункции

#КонецОбласти