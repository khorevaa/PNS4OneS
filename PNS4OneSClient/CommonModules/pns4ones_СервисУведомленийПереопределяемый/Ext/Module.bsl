///////////////////////////////////////////////////////////////////////////////////////////////////////
// (с) Tolkachev Pavel, 2021-2022
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает идентификатор текущей информационной базы.
// 
// Возвращаемое значение:
//  Строка - идентификатор текущей информационной базы.
//
Функция ИдентификаторИнформационнойБазы() Экспорт
	
	// Если в конфигурации не используется библиотека стандартных подсистем, то реализуйте свой алгоритм
	// получения идентификатора вашей информационной базы.
	Возврат СтандартныеПодсистемыСервер.ИдентификаторИнформационнойБазы();
	
КонецФункции

// Возвращает группу пользователя, используется для групповой отправки уведомлений.
//
// Параметры:
//  ПользовательИБ - ПользовательИнформационнойБазы - пользователя, группу которого необходимо получить.
// 
// Возвращаемое значение:
//  Строка - группа пользователя.
//
Функция ГруппаПользователяИБ(ПользовательИБ) Экспорт
	
	// Реализован алгоритм получения группы пользователя для конфигураций, использующих библиотеку стандартных
	// подсистем. В качестве группы используется наименование элемента справочника "ГруппыПользователей", в которую
	// входит пользователь. Если пользователь включен в несколько групп, то будет использована только одна из этих
	// групп. Если библиотека стандартных подсистем не используется или реализованный алгоритм не подходит под
	// задачи групповой рассылки уведомлений, то реализуйте собственный алгоритм определения группы пользователя.
	
	ПользовательСсылка = Справочники.Пользователи.НайтиПоРеквизиту(
		"ИдентификаторПользователяИБ",
		ПользовательИБ.УникальныйИдентификатор
	);
	Если ПользовательСсылка.Пустая() Тогда
		Возврат "";
	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ГруппыПользователейСостав.Ссылка.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	|ГДЕ
	|	ГруппыПользователейСостав.Пользователь = &Пользователь
	|	И НЕ ГруппыПользователейСостав.Ссылка.ПометкаУдаления");
	Запрос.УстановитьПараметр("Пользователь", ПользовательСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Наименование;
	
КонецФункции

// Записывает ключ клиента получения уведолений в безопасное хранилище. Перед вызовом должен быть установлен
// привилегированный режим.
//
// Параметры:
//  КлючКлиента - Строка - ключ клиента получения уведомлений.
//
Процедура ЗаписатьКлючКлиентаПолученияУведомлений(КлючКлиента) Экспорт
	
	// Реализуйте свой алгоритм безопасного сохранения, если не используется библиотека стандартных подсистем
	// или данный функционал не подходит с точки зрения безопасности.
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
		"pns4ones",
		КлючКлиента,
		"КлючКлиентаПриемаУведомлений"
	);
	
КонецПроцедуры

// Записывает ключ сервера отправления уведолений в безопасное хранилище. Перед вызовом должен быть установлен
// привилегированный режим.
//
// Параметры:
//  КлючСервера - Строка - ключ сервера отправления уведомлений.
//
Процедура ЗаписатьКлючСервераОтправленияУведомлений(КлючСервера) Экспорт
	
	// Реализуйте свой алгоритм безопасного сохранения, если не используется библиотека стандартных подсистем
	// или данный функционал не подходит с точки зрения безопасности.
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
		"pns4ones",
		КлючСервера,
		"КлючСервераОтправленияУведомлений"
	);
	
КонецПроцедуры

// Выполняет чтение из безопасного хранилища ключа клиента получения уведолений и возвращает прочитанное значение.
// Перед вызовом должен быть установлен привилегированный режим.
// 
// Возвращаемое значение:
//  Строка - ключ клиента получения уведомлений.
//
Функция ПрочитатьКлючКлиентаПолученияУведомлений() Экспорт
	
	// Реализуйте свой алгоритм безопасного чтения, если не используется библиотека стандартных подсистем
	// или данный функционал не подходит с точки зрения безопасности.
	Возврат ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		"pns4ones",
		"КлючКлиентаПриемаУведомлений"
	);
	
КонецФункции

// Выполняет чтение из безопасного хранилища ключа сервера отправления уведолений и возвращает прочитанное значение.
// Перед вызовом должен быть установлен привилегированный режим.
// 
// Возвращаемое значение:
//  Строка - ключ сервера отправления уведомлений.
//
Функция ПрочитатьКлючСервераОтправленияУведомлений() Экспорт
	
	// Реализуйте свой алгоритм безопасного чтения, если не используется библиотека стандартных подсистем
	// или данный функционал не подходит с точки зрения безопасности.
	Возврат ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		"pns4ones",
		"КлючСервераОтправленияУведомлений"
	);
	
КонецФункции

// Выполняет запись ключа доступа к серверу отправления уведомлений в безопасное хранилище. Перед вызовом должен быть 
// установлен привилегированный режим.
//
// Параметры:
//  КлючДоступа - Структура - данные ключа доступа к серверу отправления уведомлений. Подробнее см. описание
//                            ПрочитатьКлючДоступаКСерверуОтправленияУведомлений.
//
Процедура ЗаписатьКлючДоступаКСерверуОтправленияУведомлений(КлючДоступа) Экспорт

	// Реализуйте свой алгоритм безопасного сохранения, если не используется библиотека стандартных подсистем
	// или данный функционал не подходит с точки зрения безопасности.
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
		"pns4ones",
		КлючДоступа,
		"КлючДоступаСервераОтправленияУведомлений"
	);

КонецПроцедуры

// Выполняет чтение из безопасного хранилища ключа доступа к серверу отправления уведомлений и возвращает прочитанное
// значение. Перед вызовом должен быть установлен привилегированный режим.
// 
// Возвращаемое значение:
//  Структура - данные ключа доступа:
//   * КлючДоступа - Строка - значение ключа доступа;
//   * СрокДействия - Дата - срок действия ключа.
//
Функция ПрочитатьКлючДоступаКСерверуОтправленияУведомлений() Экспорт
	
	// Реализуйте свой алгоритм безопасного чтения, если не используется библиотека стандартных подсистем
	// или данный функционал не подходит с точки зрения безопасности.
	Возврат ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		"pns4ones",
		"КлючДоступаСервераОтправленияУведомлений"
	);
	
КонецФункции

#КонецОбласти